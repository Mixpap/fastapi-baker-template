{%- if use_database %}
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context

config = context.config

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Import SQLModel and models
import sqlmodel

# Import all models to ensure they're registered with SQLModel
{%- if include_db_examples %}
from backend.db.schema import User, Post  # noqa: F401
{%- else %}
from backend.db.schema import *  # noqa: F403,F401
{%- endif %}

# Get the metadata
target_metadata = sqlmodel.SQLModel.metadata

# Get database URL from settings
from backend.deps import get_settings
settings = get_settings()
config.set_main_option("sqlalchemy.url", settings.database_url)

def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
{%- endif %}