# backend/deps.py
"""
Dependency injection module for FastAPI application.
Contains shared dependencies like settings and authentication.
"""

from functools import lru_cache
from collections.abc import Generator
from typing import Annotated, Any
from fastapi import Depends
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field
from loguru import logger
{%- if use_database %}
from sqlmodel import Session, create_engine, SQLModel
{%- endif %}

class Settings(BaseSettings):
    """Application settings with environment variable support."""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
    )
    
    # Basic app settings
    logfire_token: str = Field(default="", validation_alias="LOGFIRE_TOKEN")
    {%- if use_database %}
    
    # Database settings
    database_url: str = Field(
        {%- if database_type == "postgresql" %}
        default="postgresql://user:password@localhost/{{project_name.lower().replace('-', '_')}}",
        {%- elif database_type == "mysql" %}
        default="mysql://user:password@localhost/{{project_name.lower().replace('-', '_')}}",
        {%- else %}
        default="sqlite:///./app.db",
        {%- endif %}
        validation_alias="DATABASE_URL",
        description="Database connection URL"
    )
    {%- endif %}

    def model_post_init(self, context: Any) -> None:
        return None

@lru_cache()
def get_settings() -> Settings:
    """
    Create settings instance with caching.
    This ensures settings are loaded only once.
    """
    return Settings()

# Dependency to get settings in route handlers
SettingsDep = Annotated[Settings, Depends(get_settings)]

{%- if use_database %}

# Database Engine - Created once and reused
_engine = None

def get_db_engine():
    """
    Get or create the database engine.
    Engine is created once and reused throughout the application.
    """
    global _engine
    if _engine is None:
        settings = get_settings()
        connect_args = {}
        {%- if database_type == "sqlite" %}
        connect_args = {"check_same_thread": False}
        {%- endif %}
        
        _engine = create_engine(
            settings.database_url,
            echo=False,  # Set to True for SQL logging
            connect_args=connect_args
        )
        # Note: Tables are managed by Alembic migrations
    return _engine

def get_db_session() -> Generator[Session, None, None]:
    """
    FastAPI dependency that provides a database session.
    Automatically handles session lifecycle (create, commit, rollback, close).
    
    Usage in route handlers:
        async def create_user(user: UserCreate, db: SessionDep):
            # Use db session here
            pass
    """
    engine = get_db_engine()
    with Session(engine) as session:
        try:
            yield session
        except Exception:
            session.rollback()
            raise
        finally:
            session.close()


# Annotated dependency for db sessions
SessionDep = Annotated[Session, Depends(get_db_session)]
{%- endif %}