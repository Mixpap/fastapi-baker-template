# backend/routes/api.py
from typing import Any

from fastapi import APIRouter
{%- if use_database and include_db_examples %}, HTTPException, status{%- endif %}
from pydantic import BaseModel
{%- if use_database and include_db_examples %}
from sqlmodel import select

from ..db.schema import User
from ..deps import SessionDep
{%- endif %}

# Create the router
router = APIRouter()

# Example Pydantic models for request/response validation
class HealthResponse(BaseModel):
    status: str
    message: str

class ExampleResponse(BaseModel):
    data: dict[str, Any]
    count: int

@router.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint for the API."""
    return HealthResponse(
        status="healthy",
        message="API is running successfully"
    )

@router.get("/example", response_model=ExampleResponse)
async def get_example_data():
    """Example endpoint demonstrating proper FastAPI patterns."""
    return ExampleResponse(
        data={"sample": "data", "timestamp": "2025-01-01T00:00:00Z"},
        count=1
    )

{%- if use_database and include_db_examples %}

# Example CRUD operations using the database dependency

# Request/Response models
class UserCreate(BaseModel):
    name: str
    email: str

class UserResponse(BaseModel):
    id: int
    name: str
    email: str

@router.post("/users/", response_model=UserResponse)
async def create_user(user_data: UserCreate, db: SessionDep):
    """
    Create a new user.
    This demonstrates how to use the SessionDep dependency.
    """
    # Create new user instance
    user = User(name=user_data.name, email=user_data.email)

    # Add to session and commit
    db.add(user)
    db.commit()
    db.refresh(user)  # Get the ID back from the database

    return user

@router.get("/users/", response_model=list[UserResponse])
async def get_users(db: SessionDep):
    """
    Get all users.
    This shows how to query using the session dependency.
    """
    # Query all users
    statement = select(User)
    users = db.exec(statement).all()

    return users

@router.get("/users/{user_id}", response_model=UserResponse)
async def get_user(user_id: int, db: SessionDep):
    """
    Get a specific user by ID.
    Shows error handling with database queries.
    """
    # Query specific user
    user = db.get(User, user_id)

    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"User with id {user_id} not found"
        )

    return user
{%- endif %}